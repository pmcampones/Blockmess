#### General Settings

##
# Network interface being used in the communications of the program.
# In Linux distros, the interfaces available can be seen running the command "ip addr".
# When running locally, it's recommended that the interface "lo" is used.
# This interface routes the messages back to the machine that sent them.
# When running this program on containers or in a distributed deployment, use other interfaces.
##
#interface=eth0
interface=lo

##
# The IP address of this node.
##
#address=192.168.0.10
address=localhost

##
# The port being used by this node.
# In practice, more ports are used;
# the one presented here is used in connections maintaining the structure of the P2P network overlay.
# Ports used in the broadcast protocols have a fixed offset following this.
# As a result, this program will fail when running over a thousand nodes in a same IP address.
##
port=6000

##
# IP address and port of the contact node.
# The contact node answers connections of joining nodes to form the P2P overlay network.
# Ensure that the contact node is initialized before adding other nodes.
##
#contact=192.168.0.10:6000
contact=localhost:6000

#### Output

##
# Pathname of the file where the console outputs of this node will be redirected.
# Should be a different file for every node, otherwise outputs will be jumbled.
##
redirectFile=outputLogs/logs.log

#### Ledger Manager

##
# The minimum allowed number of parallel chains in use.
##
minNumChains=1

##
# The maximum allowed number of parallel chains in use.
# The higher the number of parallel chains, the greater the amount of metadata sent in blocks.
# At a given point, the amount of metadata transmitted ensures that increasing the number of parallel chains reduces the achievable throughput.
# The greater the maximum allowed block size, the higher the number of parallel chains allowed before deteriorating the throughput.
##
maxNumChains=1

##
# Initial number of parallel chains.
# The hierarchical structure of the generated chains follows the
# expected theoretical model for the chain tree when the content is uniformly distributed.
# To maintain the structure balanced, the number of initial chains should belong to the following succession:
# num_chains_epoch(epoch)   = 1                                                             epoch = 0
#                           = 3                                                             epoch = 1
#                           = 2 * num_chains_epoch(epoch - 2) + num_chains_epoch(epoch - 1) epoch >= 2
##
initialNumChains=1

##
# The depth within the longest chain in a blockchain required for a block to be finalized.
# Its value depends on the adversary presence F and the ratio between the block dissemination time and block proposal time.
##
finalizedWeight=6


#### General

##
# Determines whether the node should bootstrap its content and block structure from a file.
##
isBootstraped=F

##
# Pathname of the file containing the content to be bootstraped.
##
bootstrapFile=./bootstrapContent/bootstrap1.txt

##
# Whether the node generates its own keys or reads them from a fixed file.
##
generateKeys=T

##
# Location of the public key for the node.
# Should it not generate its own keys.
##
myPublic=./keys/public_6000.pem

##
# Location of the secret/private key for the node.
# Should it not generate its own keys.
##
mySecret=./keys/secret_6000.pem

##
# Identifier of the original chain in the Blockmess system.
# There should be no problem in keeping this identifier,
# however, should in the future the system evolve to having several Blockmesses in parallel,
# these need to have different ids.
##
genesisUUID=00000000-0000-0000-0000-000000000000

#### Sybil Resistant Election

##
# Time before the nodes start to propose blocks.
# All nodes should be initialized within this time frame.
##
initializationTime=10000

##
# Estimate on the number of nodes that comprise the system.
# The higher the number of nodes, the smaller the impact of a wrong estimate.
##
expectedNumNodes=1

##
# Interval of time (in milliseconds) between attempts to find a valid solution for a block.
# This value should be low when there are few nodes and the average time between block proposals is short.
##
timeBetweenQueries=100

##
# Average time (in milliseconds) between block proposals.
# Under correct parameterization, the block proposals will follow an exponential distribution.
# The higher the time between proposals, the higher the variance.
# Take this into account when processing results.
##
expectedTimeBetweenBlocks=10000

#### Block Constructor

##
# Maximum size of a block (in bytes) as it is being disseminated.
# The larger the block, the longer is its dissemination time;
# and thus the longer should be the interval between block proposals.
##
maxBlockSize=100000

#### Broadcast Protocols

##
# Amount of time (in milliseconds) a node waits after having requested a message upon having received its identifier.
##
delayedValueTimer=20000

##
# Recovers lost messages when a node has lost connection with its peers for a given period of time.
# TODO - I have not tested this in a long time, and so I'm not sure if it works. Leave as F for the time being.
##
lazyBroadcastStateRecovery=F
